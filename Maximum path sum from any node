//C++ CODE
class Solution {
  public:
    int solve(Node *root,int &maxi){
        if(!root) return 0;
        int leftSum=solve(root->left,maxi);
        int rightSum=solve(root->right,maxi);
        if(leftSum>0 && rightSum>0) maxi=max(maxi,root->data+leftSum+rightSum);
        else if(leftSum<0 && rightSum<0) maxi=max(maxi,root->data);
        else maxi=max(maxi,root->data + max(leftSum,rightSum));
        
        return  max(0,root->data + max(leftSum,rightSum));
    }
    int findMaxSum(Node *root) {
        // CodeGenius
        int maxi=INT_MIN;
        solve(root,maxi);
        return maxi;
    }
};

//JAVA CODE
class Solution {
    // MORE SMALL CODE
    int max=Integer.MIN_VALUE;
    int path(Node root)
    {
        if(root==null) return 0;
        int l=Math.max(0,path(root.left));
        int r=Math.max(0,path(root.right));
        max=Math.max(max,root.data+l+r);
        return root.data+Math.max(l,r);
    }
    int findMaxSum(Node node) {
        // your code goes here
        path(node);
        return max;
    }
}
