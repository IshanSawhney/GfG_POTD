//C++ CODE
class Solution {
  public:
    vector<int> kLargest(vector<int>& arr, int k) {
        // CodeGenius
        priority_queue<int,vector<int>,greater<int>>pq;
        for(int i=0;i<arr.size();i++){
            pq.push(arr[i]);
            if(pq.size()>k) pq.pop();
        }
        vector<int>ans(k);
        for(int i=k-1;i>=0;i--){
            ans[i]=pq.top();
            pq.pop();
        }
        return ans;
    }
};
// JAVA CODE
class Solution {
    public ArrayList<Integer> kLargest(int[] arr, int k) {
        // Your code here
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for(int num:arr){
            minHeap.add(num);
            if(minHeap.size()>k){
                minHeap.poll();
            }
        }
        
        ArrayList<Integer> result = new ArrayList<>(minHeap);
        result.sort(Collections.reverseOrder());
        return result;
        
    }
}
