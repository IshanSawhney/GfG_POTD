//C++ CODE
class Solution {
  public:
    void inorder(Node* root,vector<int>&temp){
        if(!root)return ;
        inorder(root->left,temp);
        temp.push_back(root->data);
        inorder(root->right,temp);
    }
    bool isBST(Node* root) {
        //CodeGenius
        if(!root->left && !root->right) return true;
        vector<int>temp;
        inorder(root,temp);
        for(int i=0;i<temp.size()-2;i++){
            if(temp[i]>temp[i+1]) return false;
        }
        return true;
        
    }
};
//JAVA CODE
class Solution {
    void inorder(Node root, List<Integer> h) {
        if (root == null) {
            return;
        }
        // LNR
        inorder(root.left, h);
        h.add(root.data);
        inorder(root.right, h);
    }

    boolean isBST(Node root) {
        List<Integer> h = new ArrayList<>();
        inorder(root, h);
        for (int i = 1; i < h.size(); i++) {
            if (h.get(i) <= h.get(i - 1)) {
                return false;
            }
        }
        return true;
    }
}
