//C++ CODE
class Solution {
  public:
    vector<double> getMedian(vector<int> &arr) {
        //CodeGenius
        priority_queue<int>leftmaxheap;
        priority_queue<int,vector<int>,greater<int>>rightminheap;
        vector<double>ans;
        for(int i=0;i<arr.size();i++){
            leftmaxheap.push(arr[i]);
            
            int ele=leftmaxheap.top();
            rightminheap.push(ele);
            leftmaxheap.pop();
            
            if(rightminheap.size()>leftmaxheap.size()){
                int ele=rightminheap.top();
                leftmaxheap.push(ele);
                rightminheap.pop();
            }
            double median;
            if(leftmaxheap.size()!=rightminheap.size())
            median=leftmaxheap.top();
            else
            median=(double)(leftmaxheap.top()+rightminheap.top())/2;
            ans.push_back(median);
        }
        return ans;
    }
};
//JAVA CODE
class Solution {
    static ArrayList<Double> getMedian(int[] arr) {
        PriorityQueue<Integer> leftMaxHeap = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<Integer> rightMinHeap = new PriorityQueue<>();
        ArrayList<Double> res = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            leftMaxHeap.add(arr[i]);
            int temp = leftMaxHeap.poll();
            rightMinHeap.add(temp);
            if (rightMinHeap.size() > leftMaxHeap.size()) {
                temp = rightMinHeap.poll();
                leftMaxHeap.add(temp);
            }
            double median;
            if (leftMaxHeap.size() != rightMinHeap.size())
                median = leftMaxHeap.peek();
            else
                median = (leftMaxHeap.peek() + rightMinHeap.peek()) / 2.0;
            res.add(median);
        }
        return res;
    }
}
