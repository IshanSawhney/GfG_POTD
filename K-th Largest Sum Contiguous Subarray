//C++ CODE
class Solution {
  public:
    int kthLargest(vector<int> &arr, int k) {
        //CodeGenius
        int n=arr.size();
        vector<int>pre(n+1,0);
        
        for(int i=0;i<n;i++) pre[i+1]=pre[i]+arr[i];
        priority_queue<int,vector<int>,greater<int>>mH;
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<=n;j++){
                int sum= pre[j]-pre[i];
                if(mH.size()<k) mH.push(sum);
                else if(sum>mH.top()){
                    mH.pop();
                    mH.push(sum);
                }
             }
        }
        return mH.top();
    }
};
//JAVA CODE
class Solution {
    public static int kthLargest(int[] arr, int k) {
        // code here
        int n = arr.length;
        PriorityQueue<Integer> q = new PriorityQueue<>();
        for(int i=0;i<n;i++){
            int sum = 0;
            for(int j=i;j<n;j++){
                sum = sum + arr[j];
                
                if(q.size() < k){
                    q.offer(sum);
                }else if(sum > q.peek()){
                    q.poll();
                    q.offer(sum);
                }
            }
        }
        return q.peek();
    }
}
