//C++ CODE
class Solution {
  public:
    int minValue(string &s, int k) {
        //CodeGenius
        vector<int>freq(26,0);
        for(char c : s) freq[c-'a']++;
        int maxi=INT_MIN;
        map<int,int>mp;
        for(int i=0;i<freq.size();i++){
            if(freq[i]!=0)mp[freq[i]]++;
            maxi=max(maxi,freq[i]);
        }
        while(k>0 && maxi>0){
            int remov=min(k,mp[maxi]);
            mp[maxi]-=remov;
            mp[maxi-1]+=remov;
            if(mp[maxi]==0) mp.erase(maxi--);
            k-=remov;
        }
        int value=0;
        for(auto& it : mp){
            value+=it.first*it.first*it.second;
        }
        return value;
    }
};
//JAVA CODE
class Solution {
    public int minValue(String s, int k) {
        int n = s.length();
        int[] alphabetCount = new int[26];
        int maxi = 0;
        for (char c : s.toCharArray()) {
            alphabetCount[c - 'a']++;
            maxi = Math.max(maxi, alphabetCount[c - 'a']);
        }

        int[] freq = new int[maxi + 1];
        int maxFreq = 0;
        for (int count : alphabetCount) {
            if (count > 0) {
                freq[count]++;
                maxFreq = Math.max(maxFreq, count);
            }
        }
        while (k > 0 && maxFreq > 0) {
            int countAtMax = freq[maxFreq];
            if (countAtMax <= k) {
                k -= countAtMax;
                freq[maxFreq - 1] += countAtMax;
                freq[maxFreq] = 0;
                maxFreq--;
            } else {
                freq[maxFreq] -= k;
                freq[maxFreq - 1] += k;
                k = 0;
            }
        }
        int result = 0;
        for (int i = 1; i <= maxi; i++) {
            result += i * i * freq[i];
        }
        return result;
    }
}
