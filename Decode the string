//C++ CODE
class Solution {
  public:
    string decodedString(string &s) {
        //CodeGenius
        stack<char>st;
        for(int i=0;i<s.size();i++){
            if(s[i]!=']') st.push(s[i]);
            else{
                string word;
                while(!st.empty() && st.top()!='['){
                    word.push_back(st.top());
                    st.pop();
                }
                reverse(word.begin(),word.end());//ishan
                st.pop();
                string k;
                while(!st.empty() && isdigit(st.top())){
                    k.push_back(st.top());
                    st.pop();
                }
                reverse(k.begin(),k.end());
                int num=stoi(k);//3
                string repeated;
                for(int j=0;j<num;j++){
                    repeated.append(word);//ishanishanishan
                }
                for(char c: repeated) st.push(c);
            }
        }
        string ans;
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
//JAVA CODE
class Solution {
    static String decodeString(String s) {
        Stack<Character> st = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            // Push characters into the stack until ']' is encountered
            if (s.charAt(i) != ']') {
                st.push(s.charAt(i));
            }
            else {
                StringBuilder temp = new StringBuilder();
                while (!st.isEmpty() && st.peek() != '[') {
                    temp.insert(0, st.pop());
                }
                st.pop();

                StringBuilder num = new StringBuilder();
                while (!st.isEmpty() && Character.isDigit(st.peek())) {
                    num.insert(0, st.pop());
                }
                int number = Integer.parseInt(num.toString());
                StringBuilder repeat = new StringBuilder();
                for (int j = 0; j < number; j++) repeat.append(temp);
                for (char c : repeat.toString().toCharArray()) st.push(c);
            }
        }

        StringBuilder res = new StringBuilder();
        while (!st.isEmpty()) {
            res.insert(0, st.pop());
        }
        return res.toString();
    }
}
