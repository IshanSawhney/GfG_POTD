//C++ CODE
class Solution {
  public:
    bool validgroup(vector<int> &arr, int k) {
        // CodeGenius
        if(arr.size() % k !=0) return false;
        unordered_map<int,int>mp;
        for(int i=0;i<arr.size();i++)  mp[arr[i]]++;
        sort(arr.begin(),arr.end());
        
        for(int i=0;i<arr.size();i++){
            if(mp[arr[i]]==0) continue;
            for(int j=0;j<k;j++){
                if(mp[arr[i]+j]==0) return false;
                mp[arr[i]+j]--;
            }
        }
        return true;
    }
};
//JAVA CODE
public class Solution {
    public boolean validgroup(int[] arr, int k) {
        if (arr.length % k != 0) return false;

        TreeMap<Integer, Integer> countMap = new TreeMap<>();
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        while (!countMap.isEmpty()) {
            int first = countMap.firstKey();

            for (int i = 0; i < k; i++) {
                int num = first + i;
                if (!countMap.containsKey(num)) {
                    return false;
                }
                countMap.put(num, countMap.get(num) - 1);
                if (countMap.get(num) == 0) {
                    countMap.remove(num);
                }
            }
        }
        return true;
    }
}
