//C++ CODE
class Solution {
  public:
    vector<int> solve(vector<int>& arr,int i,int last,vector<vector<vector<int>>> &dp){
        //base case
        if(i==arr.size()) return {};
        
        if(!dp[i][last+1].empty()) return dp[i][last+1];
        //recursive case
        auto take=(last==-1 || arr[i]%arr[last]==0) ? solve(arr,i+1,i,dp) :vector<int>{};
        if(last==-1 || arr[i]%arr[last]==0) take.insert(take.begin(),arr[i]);
        auto nottake=solve(arr,i+1,last,dp);
        
        return dp[i][last+1]=(nottake.size()>take.size() || (nottake.size()==take.size() && nottake>take ))? nottake : take;
    }
    vector<int> largestSubset(vector<int>& arr) {
        // CodeGenius
        int n=arr.size();
        sort(arr.begin(),arr.end());
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(n+1));
        return solve(arr,0,-1,dp);
        
    }
};
//JAVA CODE
class Solution {
    public int lds(int[] arr, int[] memo, int[] parent, int i) {
        if (memo[i] != -1) {
            return memo[i];
        }

        int maxLength = 1;
        int bestParent = -1;

        for (int j = 0; j < i; j++) {
            if (arr[j] % arr[i] == 0) {
                int length = lds(arr, memo, parent, j) + 1;
                if (length > maxLength) {
                    maxLength = length;
                    bestParent = j;
                }
            }
        }

        memo[i] = maxLength;
        parent[i] = bestParent;
        return maxLength;
    }

    public ArrayList<Integer> largestSubset(int[] arr) {
        int n = arr.length;
        Integer[] temp = new Integer[n];
        for (int i = 0; i < n; i++) temp[i] = arr[i];
        Arrays.sort(temp, Collections.reverseOrder());
        for (int i = 0; i < n; i++) arr[i] = temp[i];

        int[] memo = new int[n];
        int[] parent = new int[n];
        Arrays.fill(memo, -1);
        Arrays.fill(parent, -1);

        int maxSize = 0;
        int lastIndex = 0;

        for (int i = 0; i < n; i++) {
            int size = lds(arr, memo, parent, i);
            if (size > maxSize) {
                maxSize = size;
                lastIndex = i;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = lastIndex; i >= 0; i = parent[i]) {
            result.add(arr[i]);
            if (parent[i] == -1) break;
        }

        return result;
    }
}
