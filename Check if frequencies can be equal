//C++ CODE
class Solution {
  public:
    bool sameFreq(string& s) {
        // CodeGenius
        vector<int>freq(26,0);
        for(char c : s) freq[c-'a']++;
        
        unordered_map<int,int>mp;
        for(char f: freq) if(f)mp[f]++;
        
        if(mp.size()==1) return true;
        if(mp.size() !=2) return false;
        
        auto it = mp.begin();
        int F1=it->first ,c1=it->second;
        it++;
        int F2=it->first ,c2=it->second;
        if((F1==1 && c1==1) || (F2==1 && c2==1)) return true;
        if((abs(F1-F2)==1) && ((F1>F2 && c1==1) || (F2>F1 && c2==1))) return true;
        
        return false;
    }
};
//JAVA CODE
class Solution {
    public boolean sameFreq(String s) {
        int[] freq = new int[26];

        // Populate character frequency
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
        }

        int maxFreqValue = Integer.MIN_VALUE;
        int minFreqValue = Integer.MAX_VALUE;
        int maxFreqCounter = 0;
        int minFreqCounter = 0;

        for (int f : freq) {

            if (f == 0) continue;

            if (f == maxFreqValue) {

                maxFreqCounter++;
            }
            if (f == minFreqValue) {

                minFreqCounter++;
            }
            if (f > maxFreqValue) {

                maxFreqValue = f;
                maxFreqCounter = 1;
            }
            if (f < minFreqValue) {

                minFreqValue = f;
                minFreqCounter = 1;
            }
        }

        if ((maxFreqValue - minFreqValue) == 0) {
            return true;
        } else if ((maxFreqValue - minFreqValue) == 1 &&
                   (maxFreqCounter == 1 ||
                    (minFreqCounter == 1 && minFreqValue == 1))) {
            return true;
        }

        return false;
    }
}
