//C++ CODE
class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // CodeGenius
        unordered_map<int,int>mp;
        mp[0]=-1;
        int prefixsum=0,maxlen=0;
        for(int i=0;i<arr.size();i++){
            prefixsum+=(arr[i]>k)?1:-1;
            if(prefixsum>0) maxlen=i+1;
            
            if(mp.count(prefixsum-1)){
                maxlen=max(maxlen,i-mp[prefixsum-1]);
            }
            
            if(!mp.count(prefixsum)) mp[prefixsum]=i;
        }
        return maxlen;
    }
};
//JAVA CODE
class Solution {
    int longestSubarray(int[] arr, int k) {
    Map<Integer, Integer> prefixMap = new HashMap<>();
    prefixMap.put(0, -1);
    int prefixSum = 0, maxLength = 0;
    
    for (int i = 0; i < arr.length; i++) {
        prefixSum += (arr[i] > k) ? 1 : -1;
        
        if (prefixSum > 0) {
            maxLength = i + 1;
        } else {
            if (prefixMap.containsKey(prefixSum - 1)) {
                maxLength = Math.max(maxLength, i - prefixMap.get(prefixSum - 1));
            }
        }
        
        prefixMap.putIfAbsent(prefixSum, i);
    }
    
    return maxLength;
}
}
