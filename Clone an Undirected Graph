//C++ CODE
class Solution {
  public: 
    unordered_map<Node*,Node*>alreadymade;
    Node* cloneGraph(Node* node) {
        // CodeGenius
        if(!node) return NULL;
        if(alreadymade.find(node)!=alreadymade.end()) return alreadymade[node];
        Node* clone1=new Node(node->val);
        alreadymade[node]=clone1;
        for(auto it:node->neighbors){
            clone1->neighbors.push_back(cloneGraph(it));
        }
        return clone1;
    }
};
// JAVA CODE
class Solution {
    // Map to hold original node to its copy
    static HashMap<Node, Node> copies = new HashMap<>();

    Node cloneGraph(Node node) {
        // If the node is NULL, return NULL
        if (node == null) return null;

        // If node is not yet cloned, clone it
        if (!copies.containsKey(node)) {
            Node clone = new Node(node.val);
            copies.put(node, clone);

            // Recursively clone neighbors
            for (Node neighbor : node.neighbors) {
                clone.neighbors.add(cloneGraph(neighbor));
            }
        }

        // Return the clone
        return copies.get(node);
    }
}
