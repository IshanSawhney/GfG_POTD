//C++ CODE
class Solution {
  public:
    vector<int> leafNodes(vector<int>& preorder) {
        //CodeGenius
        stack<int>st;
        vector<int>ans;
        
        st.push(preorder[0]);
        for(int i=1;i<preorder.size();i++){
            if(preorder[i]<st.top()) st.push(preorder[i]);
            else{
                int temp=st.top();
                int count=0;
                while(!st.empty() && preorder[i]>st.top()){
                    st.pop();
                    count++;
                }
                st.push(preorder[i]);
                if(count>=2) ans.push_back(temp);
            }
        }
        ans.push_back(st.top());
        return ans;
    }
};
//JAVA CODE
class Solution {

    public ArrayList<Integer> leafNodes(int[] preorder) {
        Stack<Integer> s = new Stack<>();
        ArrayList<Integer> leaves = new ArrayList<>();
        int n = preorder.length;

        for (int i = 0, j = 1; j < n; i++, j++) {
            boolean found = false;
            if (preorder[i] > preorder[j]) {
                s.push(preorder[i]);
            } else {
                while (!s.isEmpty()) {
                    if (preorder[j] > s.peek()) {
                        s.pop();
                        found = true;
                    } else {
                        break;
                    }
                }
            }
            if (found) {
                leaves.add(preorder[i]);
            }
        }
        leaves.add(preorder[n - 1]);

        return leaves;
    }
}
